package YumeXi/format/prettier

alias @YumeXi/format/base as @base
alias @YumeXi/format/prettier/rope as @rope
alias @YumeXi/format/style as @style

// Values
fn break_with(String) -> Doc

fn colorize(&Pretty, foreground? : &@style.ToColor) -> Doc

fn concat(Array[&Pretty]) -> Doc

fn content[T : Show](T) -> Doc

fn empty() -> Doc

fn enclose(&Pretty, &Pretty, &Pretty, foreground? : &@style.ToColor, colorized_doc~ : Bool = ..) -> Doc

fn group(Doc) -> Doc

let hardline : Doc

fn intersperse(Doc, Array[Doc]) -> Doc

fn line() -> Doc

fn nest(indent~ : Int = .., Doc) -> Doc

fn prettify(String, Array[&Pretty]) -> String

fn space() -> Doc

fn surround(&Pretty, &Pretty, &Pretty) -> Doc

fn text(String) -> Doc

fn try_prettify(String, Array[&Pretty]) -> String!@base.FormatError

// Types and methods
pub(all) enum Doc {
  Empty
  Break(String)
  Text(@rope.Rope)
  Concat(Doc, Doc)
  Group(Doc)
  Nest(Int, Doc)
}
impl Doc {
  op_add(Self, Self) -> Self
  print(Self, width~ : Int = ..) -> String
}
impl @base.Formattable for Doc
impl Pretty for Doc
impl Default for Doc
impl Eq for Doc
impl Show for Doc

pub enum Mode {
  Flat
  Break
}
impl Eq for Mode
impl Show for Mode

type SimplifiedDoc
impl Show for SimplifiedDoc

impl @base.Formattable for &PrettyFormattable

// Type aliases

// Traits
pub(open) trait Pretty {
  prettify(Self) -> Doc
}
impl Pretty for Unit
impl Pretty for Bool
impl Pretty for Char
impl Pretty for Int
impl Pretty for Int64
impl Pretty for UInt
impl Pretty for UInt64
impl Pretty for Float
impl Pretty for Double
impl Pretty for String
impl[T : Pretty] Pretty for T?
impl[T : Pretty, E : Pretty + Error] Pretty for Result[T, E]
impl[T : Pretty] Pretty for FixedArray[T]
impl Pretty for &PrettyFormattable
impl Pretty for @rope.Rope
impl[T : Pretty] Pretty for @style.StyledArg[T]
impl[T : Pretty] Pretty for Array[T]
impl Pretty for Json
impl[A : Pretty, B : Pretty] Pretty for Map[A, B]

pub(open) trait PrettyFormattable : Pretty + @base.Formattable {
  pretty_format(Self, @base.FormatField?) -> Doc!@base.FormatError
}

